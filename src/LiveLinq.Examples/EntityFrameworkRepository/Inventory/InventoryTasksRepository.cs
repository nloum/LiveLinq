using System;
using System.Collections;
using System.Collections.Generic;
using LiveLinq.Dictionary;
using LiveLinq.Examples.EntityFrameworkRepository.Task;
using MoreCollections;
using SimpleMonads;

namespace LiveLinq.Examples.EntityFrameworkRepository.Inventory
{
    public class InventoryTasksRepository : IAutoGeneratedTaskRepository
    {
        private readonly IReadOnlyObservableDictionary<Guid, Task.Task> _wrapped;

        public InventoryTasksRepository(IInventoryRepository inventoryRepository)
        {
            _wrapped = inventoryRepository.ToLiveLinq()
                .SelectValue((id, inventory) => new Task.Task(Guid.NewGuid())
                {
                    Description = $"Update {inventory.Description} inventory"
                })
                .ToReadOnlyObservableDictionary();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public IEnumerator<IKeyValuePair<Guid, Task.Task>> GetEnumerator()
        {
            return _wrapped.GetEnumerator();
        }

        public int Count => _wrapped.Count;

        public bool ContainsKey(Guid key)
        {
            return _wrapped.ContainsKey(key);
        }

        public IMaybe<Task.Task> TryGetValue(Guid key)
        {
            return _wrapped.TryGetValue(key);
        }

        public Task.Task this[Guid key] => _wrapped[key];

        public IEnumerable<Guid> Keys => _wrapped.Keys;

        public IEnumerable<Task.Task> Values => _wrapped.Values;

        public IDictionaryChangesStrict<Guid, Task.Task> ToLiveLinq()
        {
            return _wrapped.ToLiveLinq();
        }
    }
}